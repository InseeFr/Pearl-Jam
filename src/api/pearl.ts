/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Pearl-Jam-Back-Office
 * OpenAPI spec version: 5.6.4
 */
import { customFetch } from '../custom-instance';
export interface OrganizationUnitDto {
  id?: string;
  label?: string;
}

export interface UserDto {
  id?: string;
  firstName?: string;
  lastName?: string;
  organizationUnit?: OrganizationUnitDto;
  localOrganizationUnits?: OrganizationUnitDto[];
}

export interface AddressDto {
  l1?: string;
  l2?: string;
  l3?: string;
  l4?: string;
  l5?: string;
  l6?: string;
  l7?: string;
  elevator?: boolean;
  building?: string;
  floor?: string;
  door?: string;
  staircase?: string;
  cityPriorityDistrict?: boolean;
}

export type CommentDtoType = typeof CommentDtoType[keyof typeof CommentDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommentDtoType = {
  INTERVIEWER: 'INTERVIEWER',
  MANAGEMENT: 'MANAGEMENT',
} as const;

export interface CommentDto {
  type: CommentDtoType;
  /**
   * @minLength 0
   * @maxLength 999
   */
  value: string;
}

export type CommunicationRequestCreateDtoReason = typeof CommunicationRequestCreateDtoReason[keyof typeof CommunicationRequestCreateDtoReason];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommunicationRequestCreateDtoReason = {
  REFUSAL: 'REFUSAL',
  UNREACHABLE: 'UNREACHABLE',
} as const;

export interface CommunicationRequestCreateDto {
  meshuggahId: string;
  creationTimestamp: number;
  reason: CommunicationRequestCreateDtoReason;
}

export type ContactAttemptDtoStatus = typeof ContactAttemptDtoStatus[keyof typeof ContactAttemptDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContactAttemptDtoStatus = {
  INA: 'INA',
  APT: 'APT',
  REF: 'REF',
  TUN: 'TUN',
  NOC: 'NOC',
  MES: 'MES',
  UCD: 'UCD',
  NLH: 'NLH',
  NPS: 'NPS',
  PUN: 'PUN',
} as const;

export type ContactAttemptDtoMedium = typeof ContactAttemptDtoMedium[keyof typeof ContactAttemptDtoMedium];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContactAttemptDtoMedium = {
  TEL: 'TEL',
  EMAIL: 'EMAIL',
  FIELD: 'FIELD',
} as const;

export interface ContactAttemptDto {
  date?: number;
  status?: ContactAttemptDtoStatus;
  medium?: ContactAttemptDtoMedium;
}

export type ContactOutcomeDtoType = typeof ContactOutcomeDtoType[keyof typeof ContactOutcomeDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContactOutcomeDtoType = {
  INA: 'INA',
  REF: 'REF',
  IMP: 'IMP',
  UCD: 'UCD',
  UTR: 'UTR',
  ALA: 'ALA',
  DUK: 'DUK',
  DUU: 'DUU',
  NUH: 'NUH',
  DCD: 'DCD',
  NOA: 'NOA',
} as const;

export interface ContactOutcomeDto {
  date?: number;
  type?: ContactOutcomeDtoType;
  totalNumberOfContactAttempts?: number;
}

export type PersonDtoTitle = typeof PersonDtoTitle[keyof typeof PersonDtoTitle];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PersonDtoTitle = {
  MISTER: 'MISTER',
  MISS: 'MISS',
} as const;

export interface PersonDto {
  id?: number;
  title?: PersonDtoTitle;
  firstName?: string;
  lastName?: string;
  email?: string;
  birthdate?: number;
  favoriteEmail?: boolean;
  privileged?: boolean;
  phoneNumbers?: PhoneNumberDto[];
}

export type PhoneNumberDtoSource = typeof PhoneNumberDtoSource[keyof typeof PhoneNumberDtoSource];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PhoneNumberDtoSource = {
  FISCAL: 'FISCAL',
  DIRECTORY: 'DIRECTORY',
  INTERVIEWER: 'INTERVIEWER',
} as const;

export interface PhoneNumberDto {
  source?: PhoneNumberDtoSource;
  favorite?: boolean;
  number?: string;
}

export type RawIdentificationDtoIdentification = typeof RawIdentificationDtoIdentification[keyof typeof RawIdentificationDtoIdentification];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoIdentification = {
  IDENTIFIED: 'IDENTIFIED',
  DESTROY: 'DESTROY',
  UNIDENTIFIED: 'UNIDENTIFIED',
} as const;

export type RawIdentificationDtoAccess = typeof RawIdentificationDtoAccess[keyof typeof RawIdentificationDtoAccess];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoAccess = {
  ACC: 'ACC',
  NACC: 'NACC',
} as const;

export type RawIdentificationDtoSituation = typeof RawIdentificationDtoSituation[keyof typeof RawIdentificationDtoSituation];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoSituation = {
  ORDINARY: 'ORDINARY',
  ABSORBED: 'ABSORBED',
  NOORDINARY: 'NOORDINARY',
} as const;

export type RawIdentificationDtoCategory = typeof RawIdentificationDtoCategory[keyof typeof RawIdentificationDtoCategory];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoCategory = {
  PRIMARY: 'PRIMARY',
  OCCASIONAL: 'OCCASIONAL',
  SECONDARY: 'SECONDARY',
  VACANT: 'VACANT',
} as const;

export type RawIdentificationDtoOccupant = typeof RawIdentificationDtoOccupant[keyof typeof RawIdentificationDtoOccupant];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoOccupant = {
  IDENTIFIED: 'IDENTIFIED',
  UNIDENTIFIED: 'UNIDENTIFIED',
} as const;

export type RawIdentificationDtoIndividualStatus = typeof RawIdentificationDtoIndividualStatus[keyof typeof RawIdentificationDtoIndividualStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoIndividualStatus = {
  DCD: 'DCD',
  NOIDENT: 'NOIDENT',
  NOFIELD: 'NOFIELD',
  SAME_ADDRESS: 'SAME_ADDRESS',
  OTHER_ADDRESS: 'OTHER_ADDRESS',
} as const;

export type RawIdentificationDtoInterviewerCanProcess = typeof RawIdentificationDtoInterviewerCanProcess[keyof typeof RawIdentificationDtoInterviewerCanProcess];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoInterviewerCanProcess = {
  YES: 'YES',
  NO: 'NO',
} as const;

export type RawIdentificationDtoNumberOfRespondents = typeof RawIdentificationDtoNumberOfRespondents[keyof typeof RawIdentificationDtoNumberOfRespondents];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoNumberOfRespondents = {
  ONE: 'ONE',
  MANY: 'MANY',
} as const;

export type RawIdentificationDtoPresentInPreviousHome = typeof RawIdentificationDtoPresentInPreviousHome[keyof typeof RawIdentificationDtoPresentInPreviousHome];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoPresentInPreviousHome = {
  AT_LEAST_ONE: 'AT_LEAST_ONE',
  NONE: 'NONE',
} as const;

export type RawIdentificationDtoHouseholdComposition = typeof RawIdentificationDtoHouseholdComposition[keyof typeof RawIdentificationDtoHouseholdComposition];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RawIdentificationDtoHouseholdComposition = {
  SAME_COMPO: 'SAME_COMPO',
  OTHER_COMPO: 'OTHER_COMPO',
} as const;

export interface RawIdentificationDto {
  identification?: RawIdentificationDtoIdentification;
  access?: RawIdentificationDtoAccess;
  situation?: RawIdentificationDtoSituation;
  category?: RawIdentificationDtoCategory;
  occupant?: RawIdentificationDtoOccupant;
  individualStatus?: RawIdentificationDtoIndividualStatus;
  interviewerCanProcess?: RawIdentificationDtoInterviewerCanProcess;
  numberOfRespondents?: RawIdentificationDtoNumberOfRespondents;
  presentInPreviousHome?: RawIdentificationDtoPresentInPreviousHome;
  householdComposition?: RawIdentificationDtoHouseholdComposition;
}

export type StateDtoType = typeof StateDtoType[keyof typeof StateDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const StateDtoType = {
  NVM: 'NVM',
  NNS: 'NNS',
  ANV: 'ANV',
  VIN: 'VIN',
  VIC: 'VIC',
  PRC: 'PRC',
  AOC: 'AOC',
  APS: 'APS',
  INS: 'INS',
  WFT: 'WFT',
  WFS: 'WFS',
  TBR: 'TBR',
  FIN: 'FIN',
  CLO: 'CLO',
  NVA: 'NVA',
} as const;

export interface StateDto {
  id?: number;
  date?: number;
  type?: StateDtoType;
}

export interface SurveyUnitUpdateDto {
  id?: string;
  persons?: PersonDto[];
  address?: AddressDto;
  move?: boolean;
  comments?: CommentDto[];
  states?: StateDto[];
  contactAttempts?: ContactAttemptDto[];
  contactOutcome?: ContactOutcomeDto;
  identification?: RawIdentificationDto;
  communicationRequests?: CommunicationRequestCreateDto[];
}

export type CommunicationRequestResponseDtoReason = typeof CommunicationRequestResponseDtoReason[keyof typeof CommunicationRequestResponseDtoReason];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommunicationRequestResponseDtoReason = {
  REFUSAL: 'REFUSAL',
  UNREACHABLE: 'UNREACHABLE',
} as const;

export type CommunicationRequestResponseDtoEmitter = typeof CommunicationRequestResponseDtoEmitter[keyof typeof CommunicationRequestResponseDtoEmitter];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommunicationRequestResponseDtoEmitter = {
  TOOL: 'TOOL',
  INTERVIEWER: 'INTERVIEWER',
} as const;

export interface CommunicationRequestResponseDto {
  communicationTemplateId?: string;
  campaignId?: string;
  meshuggahId?: string;
  reason?: CommunicationRequestResponseDtoReason;
  emitter?: CommunicationRequestResponseDtoEmitter;
  status?: CommunicationRequestStatusDto[];
}

export type CommunicationRequestStatusDtoStatus = typeof CommunicationRequestStatusDtoStatus[keyof typeof CommunicationRequestStatusDtoStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommunicationRequestStatusDtoStatus = {
  INITIATED: 'INITIATED',
  READY: 'READY',
  SUBMITTED: 'SUBMITTED',
  UNDELIVERED: 'UNDELIVERED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
} as const;

export interface CommunicationRequestStatusDto {
  date?: number;
  status?: CommunicationRequestStatusDtoStatus;
}

export interface IdentificationDto { [key: string]: unknown }

export interface SampleIdentifiersDto {
  bs?: number;
  ec?: string;
  le?: number;
  noi?: number;
  numfa?: number;
  rges?: number;
  ssech?: number;
  nolog?: number;
  nole?: number;
  autre?: string;
  nograp?: string;
}

export interface SurveyUnitDetailDto {
  id?: string;
  persons?: PersonDto[];
  address?: AddressDto;
  priority?: boolean;
  move?: boolean;
  campaign?: string;
  comments?: CommentDto[];
  sampleIdentifiers?: SampleIdentifiersDto;
  states?: StateDto[];
  contactAttempts?: ContactAttemptDto[];
  contactOutcome?: ContactOutcomeDto;
  identification?: IdentificationDto;
  communicationRequests?: CommunicationRequestResponseDto[];
}

export type InterviewerContextDtoTitle = typeof InterviewerContextDtoTitle[keyof typeof InterviewerContextDtoTitle];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InterviewerContextDtoTitle = {
  MISTER: 'MISTER',
  MISS: 'MISS',
} as const;

export interface InterviewerContextDto {
  id?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  phoneNumber?: string;
  title?: InterviewerContextDtoTitle;
}

export type CampaignUpdateDtoContactOutcomeConfiguration = typeof CampaignUpdateDtoContactOutcomeConfiguration[keyof typeof CampaignUpdateDtoContactOutcomeConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignUpdateDtoContactOutcomeConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export type CampaignUpdateDtoContactAttemptConfiguration = typeof CampaignUpdateDtoContactAttemptConfiguration[keyof typeof CampaignUpdateDtoContactAttemptConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignUpdateDtoContactAttemptConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export interface CampaignUpdateDto {
  campaignLabel: string;
  visibilities?: VisibilityCampaignUpdateDto[];
  referents?: ReferentDto[];
  email?: string;
  contactOutcomeConfiguration?: CampaignUpdateDtoContactOutcomeConfiguration;
  contactAttemptConfiguration?: CampaignUpdateDtoContactAttemptConfiguration;
}

export interface ReferentDto {
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  role?: string;
}

export interface VisibilityCampaignUpdateDto {
  managementStartDate?: number;
  interviewerStartDate?: number;
  identificationPhaseStartDate?: number;
  collectionStartDate?: number;
  collectionEndDate?: number;
  endDate?: number;
  organizationalUnit: string;
  useLetterCommunication?: boolean;
  mail?: string;
  tel?: string;
}

export interface VisibilityUpdateDto {
  managementStartDate?: number;
  interviewerStartDate?: number;
  identificationPhaseStartDate?: number;
  collectionStartDate?: number;
  collectionEndDate?: number;
  endDate?: number;
  useLetterCommunication?: boolean;
  mail?: string;
  tel?: string;
}

export interface WsText {
  text?: string;
}

export type ClosingCauseDtoType = typeof ClosingCauseDtoType[keyof typeof ClosingCauseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ClosingCauseDtoType = {
  NPA: 'NPA',
  NPI: 'NPI',
  NPX: 'NPX',
  ROW: 'ROW',
} as const;

export interface ClosingCauseDto {
  date?: number;
  type?: ClosingCauseDtoType;
}

export interface SurveyUnitContextDto {
  id?: string;
  displayName?: string;
  persons?: PersonDto[];
  address?: AddressDto;
  organizationUnitId?: string;
  priority?: boolean;
  campaign?: string;
  sampleIdentifiers?: SampleIdentifiersDto;
  states?: StateDto[];
  contactAttempts?: ContactAttemptDto[];
  contactOutcome?: ContactOutcomeDto;
  closingCause?: ClosingCauseDto;
  identification?: RawIdentificationDto;
  comments?: CommentDto[];
}

export interface SurveyUnitInterviewerLinkDto {
  surveyUnitId?: string;
  interviewerId?: string;
}

export interface JsonNode { [key: string]: unknown }

export type OrganizationUnitContextDtoType = typeof OrganizationUnitContextDtoType[keyof typeof OrganizationUnitContextDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationUnitContextDtoType = {
  LOCAL: 'LOCAL',
  NATIONAL: 'NATIONAL',
} as const;

export interface OrganizationUnitContextDto {
  id?: string;
  label?: string;
  type?: OrganizationUnitContextDtoType;
  users?: UserContextDto[];
  organisationUnitRef?: string[];
}

export interface UserContextDto {
  id?: string;
  firstName?: string;
  lastName?: string;
  organizationUnit?: OrganizationUnitDto;
  localOrganizationUnits?: OrganizationUnitDto[];
}

export interface MessageDto {
  id?: number;
  text?: string;
  sender?: string;
  recipients?: string[];
  typedRecipients?: VerifyNameResponseDto[];
  date?: number;
  status?: string;
}

export interface VerifyNameResponseDto {
  id?: string;
  type?: string;
  label?: string;
}

export interface MailDto {
  content: string;
  subject: string;
}

export type CampaignCreateDtoIdentificationConfiguration = typeof CampaignCreateDtoIdentificationConfiguration[keyof typeof CampaignCreateDtoIdentificationConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignCreateDtoIdentificationConfiguration = {
  IASCO: 'IASCO',
  HOUSEF2F: 'HOUSEF2F',
  HOUSETEL: 'HOUSETEL',
  HOUSETELWSR: 'HOUSETELWSR',
  INDF2F: 'INDF2F',
  INDF2FNOR: 'INDF2FNOR',
  INDTEL: 'INDTEL',
  INDTELNOR: 'INDTELNOR',
  SRCVREINT: 'SRCVREINT',
  NOIDENT: 'NOIDENT',
} as const;

export type CampaignCreateDtoContactOutcomeConfiguration = typeof CampaignCreateDtoContactOutcomeConfiguration[keyof typeof CampaignCreateDtoContactOutcomeConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignCreateDtoContactOutcomeConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export type CampaignCreateDtoContactAttemptConfiguration = typeof CampaignCreateDtoContactAttemptConfiguration[keyof typeof CampaignCreateDtoContactAttemptConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignCreateDtoContactAttemptConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export interface CampaignCreateDto {
  campaign: string;
  campaignLabel: string;
  visibilities: VisibilityCampaignCreateDto[];
  communicationTemplates?: CommunicationTemplateCreateDto[];
  referents?: ReferentDto[];
  email?: string;
  identificationConfiguration?: CampaignCreateDtoIdentificationConfiguration;
  contactOutcomeConfiguration?: CampaignCreateDtoContactOutcomeConfiguration;
  contactAttemptConfiguration?: CampaignCreateDtoContactAttemptConfiguration;
  sensitivity?: boolean;
}

export type CommunicationTemplateCreateDtoMedium = typeof CommunicationTemplateCreateDtoMedium[keyof typeof CommunicationTemplateCreateDtoMedium];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommunicationTemplateCreateDtoMedium = {
  LETTER: 'LETTER',
  EMAIL: 'EMAIL',
} as const;

export type CommunicationTemplateCreateDtoType = typeof CommunicationTemplateCreateDtoType[keyof typeof CommunicationTemplateCreateDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommunicationTemplateCreateDtoType = {
  REMINDER: 'REMINDER',
  NOTICE: 'NOTICE',
} as const;

export interface CommunicationTemplateCreateDto {
  campaignId: string;
  meshuggahId: string;
  medium: CommunicationTemplateCreateDtoMedium;
  type: CommunicationTemplateCreateDtoType;
}

export interface VisibilityCampaignCreateDto {
  managementStartDate: number;
  interviewerStartDate: number;
  identificationPhaseStartDate: number;
  collectionStartDate: number;
  collectionEndDate: number;
  endDate: number;
  organizationalUnit: string;
  useLetterCommunication: boolean;
  mail: string;
  tel: string;
}

export interface OngoingDto {
  ongoing?: boolean;
}

export type SurveyUnitDtoIdentificationConfiguration = typeof SurveyUnitDtoIdentificationConfiguration[keyof typeof SurveyUnitDtoIdentificationConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SurveyUnitDtoIdentificationConfiguration = {
  IASCO: 'IASCO',
  HOUSEF2F: 'HOUSEF2F',
  HOUSETEL: 'HOUSETEL',
  HOUSETELWSR: 'HOUSETELWSR',
  INDF2F: 'INDF2F',
  INDF2FNOR: 'INDF2FNOR',
  INDTEL: 'INDTEL',
  INDTELNOR: 'INDTELNOR',
  SRCVREINT: 'SRCVREINT',
  NOIDENT: 'NOIDENT',
} as const;

export type SurveyUnitDtoContactOutcomeConfiguration = typeof SurveyUnitDtoContactOutcomeConfiguration[keyof typeof SurveyUnitDtoContactOutcomeConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SurveyUnitDtoContactOutcomeConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export type SurveyUnitDtoContactAttemptConfiguration = typeof SurveyUnitDtoContactAttemptConfiguration[keyof typeof SurveyUnitDtoContactAttemptConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SurveyUnitDtoContactAttemptConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export interface SurveyUnitDto {
  id: string;
  campaign?: string;
  campaignLabel?: string;
  managementStartDate?: number;
  interviewerStartDate?: number;
  identificationPhaseStartDate?: number;
  collectionStartDate?: number;
  collectionEndDate?: number;
  endDate?: number;
  identificationConfiguration?: SurveyUnitDtoIdentificationConfiguration;
  contactOutcomeConfiguration?: SurveyUnitDtoContactOutcomeConfiguration;
  contactAttemptConfiguration?: SurveyUnitDtoContactAttemptConfiguration;
  useLetterCommunication?: boolean;
  persons?: PersonDto[];
  address?: AddressDto;
}

export interface InterviewerDto {
  id?: string;
  interviewerFirstName?: string;
  interviewerLastName?: string;
}

export type SurveyUnitCampaignDtoClosingCause = typeof SurveyUnitCampaignDtoClosingCause[keyof typeof SurveyUnitCampaignDtoClosingCause];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SurveyUnitCampaignDtoClosingCause = {
  NPA: 'NPA',
  NPI: 'NPI',
  NPX: 'NPX',
  ROW: 'ROW',
} as const;

export type SurveyUnitCampaignDtoState = typeof SurveyUnitCampaignDtoState[keyof typeof SurveyUnitCampaignDtoState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SurveyUnitCampaignDtoState = {
  NVM: 'NVM',
  NNS: 'NNS',
  ANV: 'ANV',
  VIN: 'VIN',
  VIC: 'VIC',
  PRC: 'PRC',
  AOC: 'AOC',
  APS: 'APS',
  INS: 'INS',
  WFT: 'WFT',
  WFS: 'WFS',
  TBR: 'TBR',
  FIN: 'FIN',
  CLO: 'CLO',
  NVA: 'NVA',
} as const;

export type SurveyUnitCampaignDtoIdentificationState = typeof SurveyUnitCampaignDtoIdentificationState[keyof typeof SurveyUnitCampaignDtoIdentificationState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SurveyUnitCampaignDtoIdentificationState = {
  MISSING: 'MISSING',
  FINISHED: 'FINISHED',
  ONGOING: 'ONGOING',
} as const;

export interface SurveyUnitCampaignDto {
  id?: string;
  displayName?: string;
  ssech?: number;
  location?: string;
  city?: string;
  finalizationDate?: number;
  campaign?: string;
  closingCause?: SurveyUnitCampaignDtoClosingCause;
  state?: SurveyUnitCampaignDtoState;
  reading?: boolean;
  viewed?: boolean;
  questionnaireState?: string;
  contactOutcome?: ContactOutcomeDto;
  identificationState?: SurveyUnitCampaignDtoIdentificationState;
  comments?: CommentDto[];
  interviewer?: InterviewerDto;
}

export interface SurveyUnitStatesDto {
  id?: string;
  states?: StateDto[];
}

export type CampaignDtoIdentificationConfiguration = typeof CampaignDtoIdentificationConfiguration[keyof typeof CampaignDtoIdentificationConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignDtoIdentificationConfiguration = {
  IASCO: 'IASCO',
  HOUSEF2F: 'HOUSEF2F',
  HOUSETEL: 'HOUSETEL',
  HOUSETELWSR: 'HOUSETELWSR',
  INDF2F: 'INDF2F',
  INDF2FNOR: 'INDF2FNOR',
  INDTEL: 'INDTEL',
  INDTELNOR: 'INDTELNOR',
  SRCVREINT: 'SRCVREINT',
  NOIDENT: 'NOIDENT',
} as const;

export type CampaignDtoContactAttemptConfiguration = typeof CampaignDtoContactAttemptConfiguration[keyof typeof CampaignDtoContactAttemptConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignDtoContactAttemptConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export type CampaignDtoContactOutcomeConfiguration = typeof CampaignDtoContactOutcomeConfiguration[keyof typeof CampaignDtoContactOutcomeConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignDtoContactOutcomeConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export type CampaignDtoCampaignStatsItemItem = { [key: string]: unknown };

export interface CampaignDto {
  id?: string;
  label?: string;
  email?: string;
  managementStartDate?: number;
  interviewerStartDate?: number;
  identificationPhaseStartDate?: number;
  collectionStartDate?: number;
  collectionEndDate?: number;
  endDate?: number;
  allocated?: number;
  toProcessInterviewer?: number;
  toAffect?: number;
  toFollowUp?: number;
  toReview?: number;
  finalized?: number;
  preference?: boolean;
  identificationConfiguration?: CampaignDtoIdentificationConfiguration;
  contactAttemptConfiguration?: CampaignDtoContactAttemptConfiguration;
  contactOutcomeConfiguration?: CampaignDtoContactOutcomeConfiguration;
  referents?: ReferentDto[];
  campaignStats?: CampaignDtoCampaignStatsItemItem[][];
}

export interface StateCountDto {
  idDem?: string;
  labelDem?: string;
  interviewer?: InterviewerContextDto;
  campaign?: CampaignDto;
  nvmCount?: number;
  nnsCount?: number;
  anvCount?: number;
  vinCount?: number;
  vicCount?: number;
  prcCount?: number;
  aocCount?: number;
  apsCount?: number;
  insCount?: number;
  wftCount?: number;
  wfsCount?: number;
  tbrCount?: number;
  finCount?: number;
  cloCount?: number;
  nvaCount?: number;
  npaCount?: number;
  npiCount?: number;
  npxCount?: number;
  rowCount?: number;
  noticeCount?: number;
  reminderCount?: number;
  total?: number;
}

export type CommunicationTemplateResponseDtoMedium = typeof CommunicationTemplateResponseDtoMedium[keyof typeof CommunicationTemplateResponseDtoMedium];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommunicationTemplateResponseDtoMedium = {
  LETTER: 'LETTER',
  EMAIL: 'EMAIL',
} as const;

export type CommunicationTemplateResponseDtoType = typeof CommunicationTemplateResponseDtoType[keyof typeof CommunicationTemplateResponseDtoType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CommunicationTemplateResponseDtoType = {
  REMINDER: 'REMINDER',
  NOTICE: 'NOTICE',
} as const;

export interface CommunicationTemplateResponseDto {
  id?: string;
  campaignId?: string;
  meshuggahId?: string;
  medium?: CommunicationTemplateResponseDtoMedium;
  type?: CommunicationTemplateResponseDtoType;
}

export interface SurveyUnitInterviewerResponseDto {
  id?: string;
  displayName?: string;
  persons?: PersonDto[];
  address?: AddressDto;
  priority?: boolean;
  move?: boolean;
  campaign?: string;
  comments?: CommentDto[];
  sampleIdentifiers?: SampleIdentifiersDto;
  states?: StateDto[];
  contactAttempts?: ContactAttemptDto[];
  contactOutcome?: ContactOutcomeDto;
  identification?: IdentificationDto;
  communicationTemplates?: CommunicationTemplateResponseDto[];
  communicationRequests?: CommunicationRequestResponseDto[];
}

export interface HabilitationDto {
  habilitated?: boolean;
}

export interface ContactOutcomeTypeCountDto {
  idDem?: string;
  labelDem?: string;
  campaign?: CampaignDto;
  inaCount?: number;
  refCount?: number;
  impCount?: number;
  ucdCount?: number;
  utrCount?: number;
  alaCount?: number;
  dcdCount?: number;
  nuhCount?: number;
  dukCount?: number;
  duuCount?: number;
  noaCount?: number;
  total?: number;
}

export interface CampaignSensitivityDto {
  id: string;
  sensitivity?: boolean;
}

export type CampaignResponseDtoIdentificationConfiguration = typeof CampaignResponseDtoIdentificationConfiguration[keyof typeof CampaignResponseDtoIdentificationConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignResponseDtoIdentificationConfiguration = {
  IASCO: 'IASCO',
  HOUSEF2F: 'HOUSEF2F',
  HOUSETEL: 'HOUSETEL',
  HOUSETELWSR: 'HOUSETELWSR',
  INDF2F: 'INDF2F',
  INDF2FNOR: 'INDF2FNOR',
  INDTEL: 'INDTEL',
  INDTELNOR: 'INDTELNOR',
  SRCVREINT: 'SRCVREINT',
  NOIDENT: 'NOIDENT',
} as const;

export type CampaignResponseDtoContactOutcomeConfiguration = typeof CampaignResponseDtoContactOutcomeConfiguration[keyof typeof CampaignResponseDtoContactOutcomeConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignResponseDtoContactOutcomeConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export type CampaignResponseDtoContactAttemptConfiguration = typeof CampaignResponseDtoContactAttemptConfiguration[keyof typeof CampaignResponseDtoContactAttemptConfiguration];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CampaignResponseDtoContactAttemptConfiguration = {
  F2F: 'F2F',
  TEL: 'TEL',
} as const;

export interface CampaignResponseDto {
  campaign?: string;
  campaignLabel?: string;
  visibilities?: VisibilityCampaignDto[];
  referents?: ReferentDto[];
  email?: string;
  identificationConfiguration?: CampaignResponseDtoIdentificationConfiguration;
  contactOutcomeConfiguration?: CampaignResponseDtoContactOutcomeConfiguration;
  contactAttemptConfiguration?: CampaignResponseDtoContactAttemptConfiguration;
  sensitivity?: boolean;
}

export interface VisibilityCampaignDto {
  organizationalUnit?: string;
  managementStartDate?: number;
  interviewerStartDate?: number;
  identificationPhaseStartDate?: number;
  collectionStartDate?: number;
  collectionEndDate?: number;
  endDate?: number;
  useLetterCommunication?: boolean;
  mail?: string;
  tel?: string;
}

export interface StateCountCampaignDto {
  organizationUnits?: StateCountDto[];
  france?: StateCountDto;
}

export interface CountDto {
  count?: number;
}

export interface ClosingCauseCountDto {
  npiCount?: number;
  npaCount?: number;
  npxCount?: number;
  rowCount?: number;
  total?: number;
}

export interface ContactOutcomeTypeCountCampaignDto {
  organizationUnits?: ContactOutcomeTypeCountDto[];
  france?: ContactOutcomeTypeCountDto;
}

export type AssignUserToOU200 = { [key: string]: unknown };

export type UpdateUser200 = { [key: string]: unknown };

export type DeleteUser200 = { [key: string]: unknown };

export type UpdateSurveyUnitViewed200 = { [key: string]: unknown };

export type UpdateSurveyUnitState200 = { [key: string]: unknown };

export type UpdateClosingCause200 = { [key: string]: unknown };

export type CloseSurveyUnit200 = { [key: string]: unknown };

export type UpdatePreferences200 = { [key: string]: unknown };

export type PostMessage200 = { [key: string]: unknown };

export type PostDeletedMessage200 = { [key: string]: unknown };

export type DeleteInterviewer200 = { [key: string]: unknown };

export type DeleteCampaignByIdParams = {
force?: boolean;
};

export type PostMessage1200 = { [key: string]: unknown };

export type CreateUser200 = { [key: string]: unknown };

export type GetListSurveyUnitParams = {
extended?: boolean;
};

export type PostSurveyUnits200 = { [key: string]: unknown };

export type PostSurveyUnitInterviewerLinks200 = { [key: string]: unknown };

export type PostSurveyUnitByIdInTempZone200 = { [key: string]: unknown };

export type PostContext200 = { [key: string]: unknown };

export type PostOrganizationUnit200 = { [key: string]: unknown };

export type PostUsersByOrganizationUnit200 = { [key: string]: unknown };

export type PostMessage2200 = { [key: string]: unknown };

export type GetSurveyUnitsInTempZone200 = { [key: string]: unknown };

export type GetInterviewersStateCountParams = {
date?: number;
};

export type GetStateEnum200Item = typeof GetStateEnum200Item[keyof typeof GetStateEnum200Item];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetStateEnum200Item = {
  NVM: 'NVM',
  NNS: 'NNS',
  ANV: 'ANV',
  VIN: 'VIN',
  VIC: 'VIC',
  PRC: 'PRC',
  AOC: 'AOC',
  APS: 'APS',
  INS: 'INS',
  WFT: 'WFT',
  WFS: 'WFS',
  TBR: 'TBR',
  FIN: 'FIN',
  CLO: 'CLO',
  NVA: 'NVA',
} as const;

export type GetContactOutcomeEnum200Item = typeof GetContactOutcomeEnum200Item[keyof typeof GetContactOutcomeEnum200Item];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetContactOutcomeEnum200Item = {
  INA: 'INA',
  REF: 'REF',
  IMP: 'IMP',
  UCD: 'UCD',
  UTR: 'UTR',
  ALA: 'ALA',
  DUK: 'DUK',
  DUU: 'DUU',
  NUH: 'NUH',
  DCD: 'DCD',
  NOA: 'NOA',
} as const;

export type GetContactAttemptEnum200Item = typeof GetContactAttemptEnum200Item[keyof typeof GetContactAttemptEnum200Item];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetContactAttemptEnum200Item = {
  INA: 'INA',
  APT: 'APT',
  REF: 'REF',
  TUN: 'TUN',
  NOC: 'NOC',
  MES: 'MES',
  UCD: 'UCD',
  NLH: 'NLH',
  NPS: 'NPS',
  PUN: 'PUN',
} as const;

export type CheckHabilitationParams = {
id: string;
role?: string;
};

export type GetCampaignsStateCountParams = {
date?: number;
};

export type GetCampaignsContactOutcomeTypeCountParams = {
date?: number;
};

export type GetSurveyUnitByCampaignIdParams = {
state?: string;
};

export type GetCampaignStateCountParams = {
date?: number;
};

export type GetNbSUNotAttributedStateCountParams = {
date?: number;
};

export type GetNbSUNotAttributedContactOutcomesParams = {
date?: number;
};

export type GetInterviewerStateCountParams = {
date?: number;
};

export type GetContactOuctomeByCampaignAndInterviewerParams = {
date?: number;
};

export type GetClosingCauseCountParams = {
date?: number;
};

export type GetContactOutcomeTypeCountByCampaignParams = {
date?: number;
};

export type GetInterviewersStateCountByCampaignParams = {
date?: number;
};

export type DeleteOrganizationUnit200 = { [key: string]: unknown };

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Assign User to Organization Unit
 */
export const assignUserToOU = (
    userId: string,
    ouId: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<AssignUserToOU200>(
      {url: `/api/user/${userId}/organization-unit/${ouId}`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary Get User by id
 */
export const getUserById = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<UserDto>(
      {url: `/api/user/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update User
 */
export const updateUser = (
    id: string,
    userDto: UserDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<UpdateUser200>(
      {url: `/api/user/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: userDto
    },
      options);
    }
  
/**
 * @summary Delete User
 */
export const deleteUser = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<DeleteUser200>(
      {url: `/api/user/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Get detail of specific survey unit 
 */
export const getSurveyUnitById = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SurveyUnitInterviewerResponseDto>(
      {url: `/api/survey-unit/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update the Survey Unit
 */
export const updateSurveyUnit = (
    id: string,
    surveyUnitUpdateDto: SurveyUnitUpdateDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SurveyUnitDetailDto>(
      {url: `/api/survey-unit/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: surveyUnitUpdateDto
    },
      options);
    }
  
/**
 * @summary Delete survey-unit
 */
export const deleteSurveyUnit = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<void>(
      {url: `/api/survey-unit/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Update the state of Survey Units listed in request body
 */
export const updateSurveyUnitViewed = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<UpdateSurveyUnitViewed200>(
      {url: `/api/survey-unit/${id}/viewed`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary Update the state of Survey Units listed in request body
 */
export const updateSurveyUnitState = (
    id: string,
    state: 'NVM' | 'NNS' | 'ANV' | 'VIN' | 'VIC' | 'PRC' | 'AOC' | 'APS' | 'INS' | 'WFT' | 'WFS' | 'TBR' | 'FIN' | 'CLO' | 'NVA',
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<UpdateSurveyUnitState200>(
      {url: `/api/survey-unit/${id}/state/${state}`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary Update the comment of a survey unit
 */
export const updateSurveyUnitComment = (
    id: string,
    commentDto: CommentDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<void>(
      {url: `/api/survey-unit/${id}/comment`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: commentDto
    },
      options);
    }
  
/**
 * @summary Add Closing cause
 */
export const updateClosingCause = (
    id: string,
    closingCause: 'NPA' | 'NPI' | 'NPX' | 'ROW',
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<UpdateClosingCause200>(
      {url: `/api/survey-unit/${id}/closing-cause/${closingCause}`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary Closes a survey unit
 */
export const closeSurveyUnit = (
    id: string,
    closingCause: 'NPA' | 'NPI' | 'NPX' | 'ROW',
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CloseSurveyUnit200>(
      {url: `/api/survey-unit/${id}/close/${closingCause}`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary Update current user preferences with campaigns listed in request body
 */
export const updatePreferences = (
    updatePreferencesBody: string[],
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<UpdatePreferences200>(
      {url: `/api/preferences`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePreferencesBody
    },
      options);
    }
  
/**
 * @summary Mark a message as read
 */
export const postMessage = (
    id: number,
    idep: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostMessage200>(
      {url: `/api/message/${id}/interviewer/${idep}/read`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary Mark a message as deleted
 */
export const postDeletedMessage = (
    id: number,
    idep: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostDeletedMessage200>(
      {url: `/api/message/${id}/interviewer/${idep}/delete`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary Get interviewer by Id
 */
export const getInterviewer = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<InterviewerContextDto>(
      {url: `/api/interviewer/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update interviewer
 */
export const updateInterviewer = (
    id: string,
    interviewerContextDto: InterviewerContextDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<InterviewerContextDto>(
      {url: `/api/interviewer/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: interviewerContextDto
    },
      options);
    }
  
/**
 * @summary Delete interviewer
 */
export const deleteInterviewer = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<DeleteInterviewer200>(
      {url: `/api/interviewer/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Get target campaign
 */
export const getCampaign = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CampaignResponseDto>(
      {url: `/api/campaign/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update campaign (label, email, configurations, visibilities, communication-informations, referents)
 */
export const updateCampaign = (
    id: string,
    campaignUpdateDto: CampaignUpdateDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<void>(
      {url: `/api/campaign/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: campaignUpdateDto
    },
      options);
    }
  
/**
 * @summary Delete a campaign
 */
export const deleteCampaignById = (
    id: string,
    params?: DeleteCampaignByIdParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<void>(
      {url: `/api/campaign/${id}`, method: 'DELETE',
        params
    },
      options);
    }
  
/**
 * @summary Update the visibility of a campaign for an organizational unit
 */
export const updateVisibility = (
    idCampaign: string,
    idOu: string,
    visibilityUpdateDto: VisibilityUpdateDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<void>(
      {url: `/api/campaign/${idCampaign}/organizational-unit/${idOu}/visibility`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: visibilityUpdateDto
    },
      options);
    }
  
/**
 * @summary Update Messages with campaigns or interviewers listed in request body
 */
export const postMessage1 = (
    wsText: WsText,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostMessage1200>(
      {url: `/api/verify-name`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: wsText
    },
      options);
    }
  
/**
 * @summary Get User
 */
export const getUser = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<UserDto>(
      {url: `/api/user`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create User
 */
export const createUser = (
    userDto: UserDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CreateUser200>(
      {url: `/api/user`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userDto
    },
      options);
    }
  
/**
 * @summary Get SurveyUnits
 */
export const getListSurveyUnit = (
    params?: GetListSurveyUnitParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SurveyUnitDto[]>(
      {url: `/api/survey-units`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Create survey-units
 */
export const postSurveyUnits = (
    surveyUnitContextDto: SurveyUnitContextDto[],
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostSurveyUnits200>(
      {url: `/api/survey-units`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: surveyUnitContextDto
    },
      options);
    }
  
/**
 * @summary Assign SurveyUnits to interviewers
 */
export const postSurveyUnitInterviewerLinks = (
    surveyUnitInterviewerLinkDto: SurveyUnitInterviewerLinkDto[],
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostSurveyUnitInterviewerLinks200>(
      {url: `/api/survey-units/interviewers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: surveyUnitInterviewerLinkDto
    },
      options);
    }
  
/**
 * @summary Post survey-unit to temp-zone
 */
export const postSurveyUnitByIdInTempZone = (
    id: string,
    jsonNode: JsonNode,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostSurveyUnitByIdInTempZone200>(
      {url: `/api/survey-unit/${id}/temp-zone`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: jsonNode
    },
      options);
    }
  
/**
 * @summary Get all organization-units
 */
export const getOrganizationUnits = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<OrganizationUnitContextDto[]>(
      {url: `/api/organization-units`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create Context with Organizational Unit and users associated
 */
export const postContext = (
    organizationUnitContextDto: OrganizationUnitContextDto[],
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostContext200>(
      {url: `/api/organization-units`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organizationUnitContextDto
    },
      options);
    }
  
/**
 * @summary Create Organizational Unit and users associated
 */
export const postOrganizationUnit = (
    organizationUnitContextDto: OrganizationUnitContextDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostOrganizationUnit200>(
      {url: `/api/organization-unit`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: organizationUnitContextDto
    },
      options);
    }
  
/**
 * @summary Create users by organization-unit
 */
export const postUsersByOrganizationUnit = (
    id: string,
    userContextDto: UserContextDto[],
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostUsersByOrganizationUnit200>(
      {url: `/api/organization-unit/${id}/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userContextDto
    },
      options);
    }
  
/**
 * @summary Post a message
 */
export const postMessage2 = (
    messageDto: MessageDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<PostMessage2200>(
      {url: `/api/message`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: messageDto
    },
      options);
    }
  
/**
 * @summary Post a mail to admins
 */
export const postMailMessage = (
    mailDto: MailDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<void>(
      {url: `/api/mail`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: mailDto
    },
      options);
    }
  
/**
 * @summary Get interviewers
 */
export const getListInterviewers = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<InterviewerDto[]>(
      {url: `/api/interviewers`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Post interviewers
 */
export const postInterviewers = (
    interviewerContextDto: InterviewerContextDto[],
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<string>(
      {url: `/api/interviewers`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: interviewerContextDto
    },
      options);
    }
  
/**
 * @summary Create a Campaign
 */
export const createCampaign = (
    campaignCreateDto: CampaignCreateDto,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<void>(
      {url: `/api/campaign`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: campaignCreateDto
    },
      options);
    }
  
/**
 * @summary Check if campaign is on-going
 */
export const isOngoing = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<OngoingDto>(
      {url: `/campaigns/${id}/ongoing`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary GET all survey-units in temp-zone
 */
export const getSurveyUnitsInTempZone = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<GetSurveyUnitsInTempZone200>(
      {url: `/api/survey-units/temp-zone`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get closable survey units
 */
export const getClosableSurveyUnits = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SurveyUnitCampaignDto[]>(
      {url: `/api/survey-units/closable`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get states of given survey unit
 */
export const getStatesBySurveyUnitId = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SurveyUnitStatesDto>(
      {url: `/api/survey-unit/${id}/states`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get a message
 */
export const getMessages = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MessageDto[]>(
      {url: `/api/messages/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get the message history
 */
export const getMessageHistory = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<MessageDto[]>(
      {url: `/api/message-history`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get interviewersStateCount
 */
export const getInterviewersStateCount = (
    params?: GetInterviewersStateCountParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<StateCountDto[]>(
      {url: `/api/interviewers/survey-units/state-count`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get interviewer campaigns
 */
export const getListCampaigns = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CampaignDto[]>(
      {url: `/api/interviewer/${id}/campaigns`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get detail of specific survey unit 
 */
export const getSurveyUnitById1 = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SurveyUnitInterviewerResponseDto>(
      {url: `/api/interviewer/survey-unit/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get interviewer related Campaigns
 */
export const getInterviewerCampaigns = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CampaignDto[]>(
      {url: `/api/interviewer/campaigns`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Healthcheck, check if api is alive
 */
export const healthCheck = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<void>(
      {url: `/api/healthcheck`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get enum
 */
export const getStateEnum = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<GetStateEnum200Item[]>(
      {url: `/api/enum/state`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get enum
 */
export const getContactOutcomeEnum = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<GetContactOutcomeEnum200Item[]>(
      {url: `/api/enum/contact-outcome`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get enum
 */
export const getContactAttemptEnum = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<GetContactAttemptEnum200Item[]>(
      {url: `/api/enum/contact-attempt`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Check habilitation
 */
export const checkHabilitation = (
    params: CheckHabilitationParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<HabilitationDto>(
      {url: `/api/check-habilitation`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get user related Campaigns
 */
export const getListCampaign = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CampaignDto[]>(
      {url: `/api/campaigns`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get referents of targeted campaign
 */
export const getReferents = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<ReferentDto[]>(
      {url: `/api/campaigns/${id}/referents`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get campaignStateCount
 */
export const getCampaignsStateCount = (
    params?: GetCampaignsStateCountParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<StateCountDto[]>(
      {url: `/api/campaigns/survey-units/state-count`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get campaignStateCount
 */
export const getCampaignsContactOutcomeTypeCount = (
    params?: GetCampaignsContactOutcomeTypeCountParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<ContactOutcomeTypeCountDto[]>(
      {url: `/api/campaigns/survey-units/contact-outcomes`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary get ongoing sensitive campaigns
 */
export const getCampaignSensitivityDto = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CampaignSensitivityDto[]>(
      {url: `/api/campaigns/ongoing`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get campaign visibilities
 */
export const getVisibilities = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<VisibilityCampaignDto[]>(
      {url: `/api/campaign/${id}/visibilities`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get Survey Units in target campaign
 */
export const getSurveyUnitByCampaignId = (
    id: string,
    params?: GetSurveyUnitByCampaignIdParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<SurveyUnitCampaignDto[]>(
      {url: `/api/campaign/${id}/survey-units`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get campaignStateCount
 */
export const getCampaignStateCount = (
    id: string,
    params?: GetCampaignStateCountParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<StateCountCampaignDto>(
      {url: `/api/campaign/${id}/survey-units/state-count`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get numberSUNotAttributed
 */
export const getNbSUNotAttributed = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CountDto>(
      {url: `/api/campaign/${id}/survey-units/not-attributed`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get state count for non attributted SUs
 */
export const getNbSUNotAttributedStateCount = (
    id: string,
    params?: GetNbSUNotAttributedStateCountParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<StateCountDto>(
      {url: `/api/campaign/${id}/survey-units/not-attributed/state-count`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get Contact-outcomes count for non attributted SUs
 */
export const getNbSUNotAttributedContactOutcomes = (
    id: string,
    params?: GetNbSUNotAttributedContactOutcomesParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<ContactOutcomeTypeCountDto>(
      {url: `/api/campaign/${id}/survey-units/not-attributed/contact-outcomes`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get interviewerStateCount
 */
export const getInterviewerStateCount = (
    id: string,
    idep: string,
    params?: GetInterviewerStateCountParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<StateCountDto>(
      {url: `/api/campaign/${id}/survey-units/interviewer/${idep}/state-count`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get contact-outcome type for an interviewer on a specific campaign
 */
export const getContactOuctomeByCampaignAndInterviewer = (
    id: string,
    idep: string,
    params?: GetContactOuctomeByCampaignAndInterviewerParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<ContactOutcomeTypeCountDto>(
      {url: `/api/campaign/${id}/survey-units/interviewer/${idep}/contact-outcomes`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get interviewerStateCount
 */
export const getClosingCauseCount = (
    id: string,
    idep: string,
    params?: GetClosingCauseCountParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<ClosingCauseCountDto>(
      {url: `/api/campaign/${id}/survey-units/interviewer/${idep}/closing-causes`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get campaignStateCount
 */
export const getContactOutcomeTypeCountByCampaign = (
    id: string,
    params?: GetContactOutcomeTypeCountByCampaignParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<ContactOutcomeTypeCountCampaignDto>(
      {url: `/api/campaign/${id}/survey-units/contact-outcomes`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get numberSUAbandoned
 */
export const getNbSUAbandoned = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CountDto>(
      {url: `/api/campaign/${id}/survey-units/abandoned`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get interviewers
 */
export const getListInterviewers1 = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<InterviewerDto[]>(
      {url: `/api/campaign/${id}/interviewers`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get interviewersStateCount
 */
export const getInterviewersStateCountByCampaign = (
    id: string,
    params?: GetInterviewersStateCountByCampaignParams,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<StateCountDto[]>(
      {url: `/api/campaign/${id}/interviewers/state-count`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get campaign communication templates
 */
export const getCommunicationTemplates = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CommunicationTemplateResponseDto[]>(
      {url: `/api/campaign/${id}/communication-templates`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get survey units id
 */
export const getAllSurveyUnitsId = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<string[]>(
      {url: `/api/admin/survey-units`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get all interviewers
 */
export const getCompleteListInterviewers = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<InterviewerContextDto[]>(
      {url: `/api/admin/interviewers`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get Campaigns
 */
export const getAllCampaigns = (
    
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<CampaignDto[]>(
      {url: `/api/admin/campaigns`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get survey units id by campaign
 */
export const getAllSurveyUnitsIdByCampaignId = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<string[]>(
      {url: `/api/admin/campaign/${id}/survey-units`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Delete an organization-unit
 */
export const deleteOrganizationUnit = (
    id: string,
 options?: SecondParameter<typeof customFetch>,) => {
      return customFetch<DeleteOrganizationUnit200>(
      {url: `/api/organization-unit/${id}`, method: 'DELETE'
    },
      options);
    }
  
export type AssignUserToOUResult = NonNullable<Awaited<ReturnType<typeof assignUserToOU>>>
export type GetUserByIdResult = NonNullable<Awaited<ReturnType<typeof getUserById>>>
export type UpdateUserResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
export type DeleteUserResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>
export type GetSurveyUnitByIdResult = NonNullable<Awaited<ReturnType<typeof getSurveyUnitById>>>
export type UpdateSurveyUnitResult = NonNullable<Awaited<ReturnType<typeof updateSurveyUnit>>>
export type DeleteSurveyUnitResult = NonNullable<Awaited<ReturnType<typeof deleteSurveyUnit>>>
export type UpdateSurveyUnitViewedResult = NonNullable<Awaited<ReturnType<typeof updateSurveyUnitViewed>>>
export type UpdateSurveyUnitStateResult = NonNullable<Awaited<ReturnType<typeof updateSurveyUnitState>>>
export type UpdateSurveyUnitCommentResult = NonNullable<Awaited<ReturnType<typeof updateSurveyUnitComment>>>
export type UpdateClosingCauseResult = NonNullable<Awaited<ReturnType<typeof updateClosingCause>>>
export type CloseSurveyUnitResult = NonNullable<Awaited<ReturnType<typeof closeSurveyUnit>>>
export type UpdatePreferencesResult = NonNullable<Awaited<ReturnType<typeof updatePreferences>>>
export type PostMessageResult = NonNullable<Awaited<ReturnType<typeof postMessage>>>
export type PostDeletedMessageResult = NonNullable<Awaited<ReturnType<typeof postDeletedMessage>>>
export type GetInterviewerResult = NonNullable<Awaited<ReturnType<typeof getInterviewer>>>
export type UpdateInterviewerResult = NonNullable<Awaited<ReturnType<typeof updateInterviewer>>>
export type DeleteInterviewerResult = NonNullable<Awaited<ReturnType<typeof deleteInterviewer>>>
export type GetCampaignResult = NonNullable<Awaited<ReturnType<typeof getCampaign>>>
export type UpdateCampaignResult = NonNullable<Awaited<ReturnType<typeof updateCampaign>>>
export type DeleteCampaignByIdResult = NonNullable<Awaited<ReturnType<typeof deleteCampaignById>>>
export type UpdateVisibilityResult = NonNullable<Awaited<ReturnType<typeof updateVisibility>>>
export type PostMessage1Result = NonNullable<Awaited<ReturnType<typeof postMessage1>>>
export type GetUserResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type CreateUserResult = NonNullable<Awaited<ReturnType<typeof createUser>>>
export type GetListSurveyUnitResult = NonNullable<Awaited<ReturnType<typeof getListSurveyUnit>>>
export type PostSurveyUnitsResult = NonNullable<Awaited<ReturnType<typeof postSurveyUnits>>>
export type PostSurveyUnitInterviewerLinksResult = NonNullable<Awaited<ReturnType<typeof postSurveyUnitInterviewerLinks>>>
export type PostSurveyUnitByIdInTempZoneResult = NonNullable<Awaited<ReturnType<typeof postSurveyUnitByIdInTempZone>>>
export type GetOrganizationUnitsResult = NonNullable<Awaited<ReturnType<typeof getOrganizationUnits>>>
export type PostContextResult = NonNullable<Awaited<ReturnType<typeof postContext>>>
export type PostOrganizationUnitResult = NonNullable<Awaited<ReturnType<typeof postOrganizationUnit>>>
export type PostUsersByOrganizationUnitResult = NonNullable<Awaited<ReturnType<typeof postUsersByOrganizationUnit>>>
export type PostMessage2Result = NonNullable<Awaited<ReturnType<typeof postMessage2>>>
export type PostMailMessageResult = NonNullable<Awaited<ReturnType<typeof postMailMessage>>>
export type GetListInterviewersResult = NonNullable<Awaited<ReturnType<typeof getListInterviewers>>>
export type PostInterviewersResult = NonNullable<Awaited<ReturnType<typeof postInterviewers>>>
export type CreateCampaignResult = NonNullable<Awaited<ReturnType<typeof createCampaign>>>
export type IsOngoingResult = NonNullable<Awaited<ReturnType<typeof isOngoing>>>
export type GetSurveyUnitsInTempZoneResult = NonNullable<Awaited<ReturnType<typeof getSurveyUnitsInTempZone>>>
export type GetClosableSurveyUnitsResult = NonNullable<Awaited<ReturnType<typeof getClosableSurveyUnits>>>
export type GetStatesBySurveyUnitIdResult = NonNullable<Awaited<ReturnType<typeof getStatesBySurveyUnitId>>>
export type GetMessagesResult = NonNullable<Awaited<ReturnType<typeof getMessages>>>
export type GetMessageHistoryResult = NonNullable<Awaited<ReturnType<typeof getMessageHistory>>>
export type GetInterviewersStateCountResult = NonNullable<Awaited<ReturnType<typeof getInterviewersStateCount>>>
export type GetListCampaignsResult = NonNullable<Awaited<ReturnType<typeof getListCampaigns>>>
export type GetSurveyUnitById1Result = NonNullable<Awaited<ReturnType<typeof getSurveyUnitById1>>>
export type GetInterviewerCampaignsResult = NonNullable<Awaited<ReturnType<typeof getInterviewerCampaigns>>>
export type HealthCheckResult = NonNullable<Awaited<ReturnType<typeof healthCheck>>>
export type GetStateEnumResult = NonNullable<Awaited<ReturnType<typeof getStateEnum>>>
export type GetContactOutcomeEnumResult = NonNullable<Awaited<ReturnType<typeof getContactOutcomeEnum>>>
export type GetContactAttemptEnumResult = NonNullable<Awaited<ReturnType<typeof getContactAttemptEnum>>>
export type CheckHabilitationResult = NonNullable<Awaited<ReturnType<typeof checkHabilitation>>>
export type GetListCampaignResult = NonNullable<Awaited<ReturnType<typeof getListCampaign>>>
export type GetReferentsResult = NonNullable<Awaited<ReturnType<typeof getReferents>>>
export type GetCampaignsStateCountResult = NonNullable<Awaited<ReturnType<typeof getCampaignsStateCount>>>
export type GetCampaignsContactOutcomeTypeCountResult = NonNullable<Awaited<ReturnType<typeof getCampaignsContactOutcomeTypeCount>>>
export type GetCampaignSensitivityDtoResult = NonNullable<Awaited<ReturnType<typeof getCampaignSensitivityDto>>>
export type GetVisibilitiesResult = NonNullable<Awaited<ReturnType<typeof getVisibilities>>>
export type GetSurveyUnitByCampaignIdResult = NonNullable<Awaited<ReturnType<typeof getSurveyUnitByCampaignId>>>
export type GetCampaignStateCountResult = NonNullable<Awaited<ReturnType<typeof getCampaignStateCount>>>
export type GetNbSUNotAttributedResult = NonNullable<Awaited<ReturnType<typeof getNbSUNotAttributed>>>
export type GetNbSUNotAttributedStateCountResult = NonNullable<Awaited<ReturnType<typeof getNbSUNotAttributedStateCount>>>
export type GetNbSUNotAttributedContactOutcomesResult = NonNullable<Awaited<ReturnType<typeof getNbSUNotAttributedContactOutcomes>>>
export type GetInterviewerStateCountResult = NonNullable<Awaited<ReturnType<typeof getInterviewerStateCount>>>
export type GetContactOuctomeByCampaignAndInterviewerResult = NonNullable<Awaited<ReturnType<typeof getContactOuctomeByCampaignAndInterviewer>>>
export type GetClosingCauseCountResult = NonNullable<Awaited<ReturnType<typeof getClosingCauseCount>>>
export type GetContactOutcomeTypeCountByCampaignResult = NonNullable<Awaited<ReturnType<typeof getContactOutcomeTypeCountByCampaign>>>
export type GetNbSUAbandonedResult = NonNullable<Awaited<ReturnType<typeof getNbSUAbandoned>>>
export type GetListInterviewers1Result = NonNullable<Awaited<ReturnType<typeof getListInterviewers1>>>
export type GetInterviewersStateCountByCampaignResult = NonNullable<Awaited<ReturnType<typeof getInterviewersStateCountByCampaign>>>
export type GetCommunicationTemplatesResult = NonNullable<Awaited<ReturnType<typeof getCommunicationTemplates>>>
export type GetAllSurveyUnitsIdResult = NonNullable<Awaited<ReturnType<typeof getAllSurveyUnitsId>>>
export type GetCompleteListInterviewersResult = NonNullable<Awaited<ReturnType<typeof getCompleteListInterviewers>>>
export type GetAllCampaignsResult = NonNullable<Awaited<ReturnType<typeof getAllCampaigns>>>
export type GetAllSurveyUnitsIdByCampaignIdResult = NonNullable<Awaited<ReturnType<typeof getAllSurveyUnitsIdByCampaignId>>>
export type DeleteOrganizationUnitResult = NonNullable<Awaited<ReturnType<typeof deleteOrganizationUnit>>>
